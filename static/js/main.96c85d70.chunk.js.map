{"version":3,"sources":["utils/randomInt.js","components/Navbar.js","components/Card.js","pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","randomInt","min","max","Math","floor","random","Navbar","className","style","backgroundColor","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Card","props","key","index","isFlipped","flipSpeedBackToFront","flipSpeedFrontToBack","width","height","onClick","handleClick","value","STT","title","textTransform","initialFlipping","HomePage","state","mockData","bind","numRan","i","tmp","data","length","flag","j","push","map","this","setState","initMockData","flexDirection","minHeight","element","flexGrow","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.96c85d70.chunk.js","sourcesContent":["module.exports = {\n  randomInt: (min, max) => {\n    return min + Math.floor((max - min) * Math.random())\n  }\n}\n","import React from 'react'\n\nconst Navbar = () => {\n  return (\n    <div className='fixed-top'>\n      <nav className='navbar navbar-expand-lg navbar-dark mx-background-top-linear' style={{ backgroundColor: '#e3f2fd' }}>\n        <div className='container'>\n          <a className='navbar-brand' href='/daily'><h6 className='g-color-white-opacity-0_8 g-font-size-13'> VỒ CÁ BU LA RI CỦA CAM </h6></a>\n          <button className='navbar-toggler' type='button' data-toggle='collapse' data-target='#navbarResponsive' aria-controls='navbarResponsive' aria-expanded='false' aria-label='Toggle navigation'>\n            <span className='navbar-toggler-icon' />\n          </button>\n          <div className='collapse navbar-collapse' id='navbarResponsive'>\n\n            <ul className='navbar-nav ml-auto'>\n\n              <li className='nav-item active'>\n                <a className='nav-link' href='/daily'>Home\n                  <span className='sr-only'>(current)</span>\n                </a>\n              </li>\n\n              <li className='nav-item'>\n                <a className='nav-link' href='/daily'>About</a>\n              </li>\n\n              <li className='nav-item'>\n                <a className='nav-link' href='/daily'>Blog</a>\n              </li>\n\n              <li className='nav-item'>\n                <a className='nav-link' href='/daily'>Contact</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    </div>\n  )\n}\n\nexport default Navbar\n","import React from 'react'\nimport ReactCardFlip from 'react-card-flip'\n\nconst Card = (props) => {\n  return (\n    <div className='col col-md-4' key={props.index}>\n      <ReactCardFlip\n        isFlipped={props.isFlipped}\n        flipSpeedBackToFront={2}\n        flipSpeedFrontToBack={2}\n        key={props.index}\n      >\n        <div className='card text-center' style={{ width: 200, height: 220 }} onClick={() => props.handleClick(props.index)}>\n          <div className='card-header'>\n                        W O R D {props.value.STT}\n          </div>\n          <div className='card-body'>\n            <h3 className='g-color-white-opacity-0_8 g-font-size-13'>{props.value['Tiếng Anh']}</h3>\n            <h6 className='card-subtitle mb-2 text-muted'>{props.value['Phiên âm']}</h6>\n            <h6 className='blockquote-footer'>Type: <cite title='Source Title' style={{ textTransform: 'uppercase' }}>{props.value['Loại từ']}</cite></h6>\n            {/* {value['Đồng nghĩa'] && <p className='card-text'><i>synonym:</i> {value['Đồng nghĩa']}</p>} */}\n          </div>\n        </div>\n\n        <div className='card text-center' style={{ width: 200, height: 220 }} onClick={() => props.handleClick(props.index)}>\n          <div className='card-header'>\n                        I N F O\n          </div>\n          <div className='card-body'>\n            <h5 className='card-title'>{props.value['Tiếng Anh']}</h5>\n            <h6 className='card-subtitle mb-2 text-muted'>{props.value['Phiên âm']}</h6>\n            <p className='card-text'>{props.value['Tiếng Việt']}</p>\n          </div>\n        </div>\n      </ReactCardFlip>\n    </div>\n  )\n}\n\nexport default Card\n","import React, { Component } from 'react'\nimport Flexbox from 'flexbox-react'\n\nimport Navbar from '../components/Navbar'\nimport Card from '../components/Card'\n\nimport data from '../text.json'\nimport { randomInt } from '../utils/randomInt'\n\nconst initialFlipping = [false, false, false, false, false]\n\nclass HomePage extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      isFlipped: initialFlipping,\n      mockData: []\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  initMockData () {\n    const numRan = []\n    let i = 0\n    while (i < 5) {\n      const tmp = randomInt(0, data.length)\n      let flag = 0\n      for (let j = 0; j < i - 1; j++) {\n        if (tmp === numRan[j]) {\n          flag = 1\n          break\n        }\n      }\n      if (flag === 0) {\n        numRan.push(tmp)\n        i++\n      }\n    }\n    const tmp = numRan.map((value) => {\n      return data[value]\n    })\n    this.setState({ mockData: tmp })\n  }\n\n  handleClick (index) {\n    const tmp = this.state.isFlipped\n    tmp[index] = !tmp[index]\n    this.setState({ isFlipped: tmp })\n  }\n\n  componentDidMount () {\n    this.initMockData()\n  }\n\n  render () {\n    return (\n      <Flexbox flexDirection='column' minHeight='100vh'>\n        <Flexbox element='header' height='100px'>\n          <Navbar />\n        </Flexbox>\n\n        <Flexbox flexGrow={1}>\n          <div className='container'>\n            <div className='outer'>\n              <div className='inner rotate'><h6 className='g-color-white-opacity-0_8 g-font-size-13'>S e e . m o r e ?. C l i c k . o n . t h e . c a r d</h6></div>\n            </div>\n            <div className='row justify-content-md-center'>\n              {this.state.mockData.map((value, index) => {\n                return (\n                  <Card value={value} index={index} isFlipped={this.state.isFlipped[index]} key={index} handleClick={this.handleClick} />\n                )\n              })}\n            </div>\n          </div>\n          <button type='button' className='btn btn-outline-info' href='/' onClick={() => this.initMockData()}>NEXT</button>\n        </Flexbox>\n\n      </Flexbox>\n    )\n  }\n}\n\nexport default HomePage\n","import React from 'react'\nimport './App.css'\n\nimport HomePage from './pages/HomePage'\n\nconst App = () => {\n  return (\n    <HomePage />\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}