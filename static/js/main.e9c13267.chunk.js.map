{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialFlipping","App","props","state","isFlipped","mockData","handleClick","bind","min","max","numRan","i","tmp","data","length","Math","floor","random","flag","j","push","map","value","this","setState","index","initMockData","flexDirection","minHeight","element","height","className","style","backgroundColor","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","flexGrow","key","flipSpeedBackToFront","flipSpeedFrontToBack","width","onClick","STT","title","textTransform","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9c13267.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport ReactCardFlip from 'react-card-flip'\nimport data from './text.json'\nimport Flexbox from 'flexbox-react'\n\nconst randomInt = (min, max) => {\n  return min + Math.floor((max - min) * Math.random())\n}\n\nconst initialFlipping = [false, false, false, false, false]\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      isFlipped: initialFlipping,\n      mockData: []\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  initMockData () {\n    const numRan = []\n    let i = 0\n    while (i < 5) {\n      const tmp = randomInt(0, data.length)\n      let flag = 0\n      for (let j = 0; j < i - 1; j++) {\n        if (tmp === numRan[j]) {\n          flag = 1\n          break\n        }\n      }\n      if (flag === 0) {\n        numRan.push(tmp)\n        i++\n      }\n    }\n    const tmp = numRan.map((value) => {\n      return data[value]\n    })\n    this.setState({ mockData: tmp })\n  }\n\n  handleClick (index) {\n    const tmp = this.state.isFlipped\n    tmp[index] = !tmp[index]\n    this.setState({ isFlipped: tmp })\n  }\n\n  componentDidMount () {\n    this.initMockData()\n  }\n\n  render () {\n    return (\n      <Flexbox flexDirection='column' minHeight='100vh'>\n        <Flexbox element='header' height='100px'>\n          <div className='fixed-top'>\n            <nav className='navbar navbar-expand-lg navbar-dark mx-background-top-linear' style={{ backgroundColor: '#e3f2fd' }}>\n              <div className='container'>\n                <a className='navbar-brand' href='/'><h6 className='g-color-white-opacity-0_8 g-font-size-13'> VỒ CÁ BU LA RI CỦA CAM </h6></a>\n                <button className='navbar-toggler' type='button' data-toggle='collapse' data-target='#navbarResponsive' aria-controls='navbarResponsive' aria-expanded='false' aria-label='Toggle navigation'>\n                  <span className='navbar-toggler-icon' />\n                </button>\n                <div className='collapse navbar-collapse' id='navbarResponsive'>\n\n                  <ul className='navbar-nav ml-auto'>\n\n                    <li className='nav-item active'>\n                      <a className='nav-link' href='/'>Home\n                        <span className='sr-only'>(current)</span>\n                      </a>\n                    </li>\n\n                    <li className='nav-item'>\n                      <a className='nav-link' href='/'>About</a>\n                    </li>\n\n                    <li className='nav-item'>\n                      <a className='nav-link' href='/'>Blog</a>\n                    </li>\n\n                    <li className='nav-item'>\n                      <a className='nav-link' href='/'>Contact</a>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </nav>\n          </div>\n        </Flexbox>\n\n        <Flexbox flexGrow={1}>\n          <div className='container'>\n            <div className='outer'>\n              <div className='inner rotate'><h6 className='g-color-white-opacity-0_8 g-font-size-13'>S e e . m o r e ?. C l i c k . o n . t h e . c a r d</h6></div>\n            </div>\n            <div className='row justify-content-md-center'>\n              {this.state.mockData.map((value, index) => {\n                return (\n                  <div className='col col-md-4' key={index}>\n                    <ReactCardFlip\n                      isFlipped={this.state.isFlipped[index]}\n                      flipSpeedBackToFront={2}\n                      flipSpeedFrontToBack={2}\n                      key={index}\n                    >\n                      <div className='card text-center' style={{ width: 200, height: 220 }} onClick={() => this.handleClick(index)}>\n                        <div className='card-header'>\n                        W O R D {value.STT}\n                        </div>\n                        <div className='card-body'>\n                          <h3 className='g-color-white-opacity-0_8 g-font-size-13'>{value['Tiếng Anh']}</h3>\n                          <h6 className='card-subtitle mb-2 text-muted'>{value['Phiên âm']}</h6>\n                          <h6 className='blockquote-footer'>Type: <cite title='Source Title' style={{ textTransform: 'uppercase' }}>{value['Loại từ']}</cite></h6>\n                          {/* {value['Đồng nghĩa'] && <p className='card-text'><i>synonym:</i> {value['Đồng nghĩa']}</p>} */}\n                        </div>\n                      </div>\n\n                      <div className='card text-center' style={{ width: 200, height: 220 }} onClick={() => this.handleClick(index)}>\n                        <div className='card-header'>\n                        I N F O\n                        </div>\n                        <div className='card-body'>\n                          <h5 className='card-title'>{value['Tiếng Anh']}</h5>\n                          <h6 className='card-subtitle mb-2 text-muted'>{value['Phiên âm']}</h6>\n                          <p className='card-text'>{value['Tiếng Việt']}</p>\n                        </div>\n                      </div>\n                    </ReactCardFlip>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n          <button type='button' className='btn btn-outline-info' href='/' onClick={() => this.initMockData()}>NEXT</button>\n        </Flexbox>\n      </Flexbox>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}